{
  "name" : "LabelGeometryImageFilter",
  "template_code_filename" : "DualImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 2,
  "pixel_types" : "IntegerPixelIDTypeList",
  "pixel_types2" : "BasicPixelIDTypeList",
  "filter_type" : "itk::LabelGeometryImageFilter<InputImageType,InputImageType2>",
  "custom_set_input" : "filter->SetInput( image1 ); filter->SetIntensityInput( image2 );",
  "no_procedure" : true,
  "no_return_image" : true,
  "members" : [
    {
      "name" : "CalculateOrientedBoundingBox",
      "type" : "bool",
      "default" : "false",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    },
    {
      "name" : "CalculateOrientedLabelRegions",
      "type" : "bool",
      "default" : "false",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    },
    {
      "name" : "CalculateOrientedIntensityRegions",
      "type" : "bool",
      "default" : "false",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    }
  ],
  "custom_methods" : [
    {
      "name" : "HasLabel",
      "doc" : "Does the specified label exist? Can only be called after a call a call to Update()."
      "return_type" : "double",
      "parameters" : [
        {
          "type" : "int64_t",
          "var_name" : "label"
        }
      ],
      "body" : "return std::find(m_Labels.begin(),m_Labels.end(), label) != m_Labels.end();"
    },
    {
      "name" : "GetNumberOfLabels",
      "doc" : "Return the number of labels after execution ."
      "return_type" : "uint64_t",
      "body" : "return m_Labels.size();"
    }
  ],
  "measurements" : [
    {
      "name" : "AxesLength",
      "type" : "std::vector<double>",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "custom_cast" : "sitkITKVectorToSTL<double>(value)",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the axes length for a label."
    },
    {
      "name" : "BoundingBox",
      "type" : "std::vector<double>",
      "no_print" : true,
      "custom_cast" : "sitkITKVectorToSTL<double>(value)",
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the computed bounding box for a label. This is organized in min/max pairs as [min(X), max(X), min(Y), max(Y), min(Z), max(Z),...]"
    },
    {
      "name" : "BoundingBoxSize",
      "type" : "std::vector<uint32_t>",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "custom_cast" : "sitkITKVectorToSTL<uint32_t>(value)",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the size of the bounding box."
    },
    {
      "name" : "BoundingBoxVolume",
      "type" : "double",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the volume of the bounding box."
    },
    {
      "name" : "Centroid",
      "type" : "std::vector<double>",
      "no_print" : true,
      "custom_cast" : "sitkITKVectorToSTL<double>(value)",
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the unweighted centroid for a label."
    },
    {
      "name" : "Eccentricity",
      "type" : "double",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the eccentricity for a label."
    },
    {
      "name" : "Eigenvalues",
      "type" : "std::vector<double>",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the eigenvalues as a vector."
    },
    {
      "name" : "Eigenvectors",
      "type" : "std::vector<double>",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "custom_cast" : "std::vector<double>(value.begin(), value.end())",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the eigenvectors as a matrix."
    },
    {
      "name" : "Elongation",
      "type" : "double",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the elongation for a label. This is defined as the length of the major axis divided by the length of the minor axis."
    },
    {
      "name" : "IntegratedIntensity",
      "type" : "double",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the number of pixels for all labels. Return the computed integrated pixel intensity for a label."
    },
    {
      "name" : "Labels",
      "type" : "std::vector<int64_t>",
      "custom_itk_cast" : "const std::vector<typename FilterType::LabelPixelType> tempLabels = filter->GetLabels();\n  this->m_Labels = std::vector<int64_t>(tempLabels.begin(), tempLabels.end());",
      "default" : "std::vector<int64_t>()",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Get the labels that are in the image."
    },
    {
      "name" : "MajorAxisLength",
      "type" : "double",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the major axis length for a label. This is a convenience class that returns the longest length from GetAxesLength."
    },
    {
      "name" : "MinorAxisLength",
      "type" : "double",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the minor axis length for a label. This is a convenience class that returns the shortest length from GetAxesLength."
    },
    {
      "name" : "Orientation",
      "type" : "double",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the orientation for a label defined in radians."
    },
    {
      "name" : "OrientedBoundingBoxOrigin",
      "type" : "std::vector<double>",
      "no_print" : true,
      "custom_cast" : "sitkITKVectorToSTL<double>(value)",
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the origin of the oriented bounding box."
    },
    {
      "name" : "OrientedBoundingBoxSize",
      "type" : "std::vector<uint32_t>",
      "no_print" : true,
      "custom_cast" : "sitkITKVectorToSTL<uint32_t>(value)",
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the size of the oriented bounding box."
    },
    {
      "name" : "OrientedBoundingBoxVertices",
      "type" : "std::vector<double>",
      "no_print" : true,
      "custom_cast" : "sitkITKVectorToSTL<double>(value)",
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the oriented bounding box vertices. The order of the vertices corresponds with binary counting, where min is zero and max is one. For example, in 2D, binary counting will give [0,0],[0,1],[1,0],[1,1], which corresponds to [minX,minY],[minX,maxY],[maxX,minY],[maxX,maxY]. Each vertex is defined as an ND point."
    },
    {
      "name" : "OrientedBoundingBoxVolume",
      "type" : "double",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the volume of the oriented bounding box."
    },
    {
      "name" : "OrientedIntensityImage",
      "type" : "Image",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "custom_cast" : "itk::simple::Image(value)",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the intensity region defined by the oriented bounding box."
    },
    {
      "name" : "OrientedLabelImage",
      "type" : "Image",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "custom_cast" : "itk::simple::Image(value)",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the label region defined by the oriented bounding box."
    },
    {
      "name" : "Region",
      "type" : "std::vector<unsigned int>",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "custom_cast" : "sitkITKImageRegionToSTL(value)",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the region defined by the bounding box."
    },
    {
      "name" : "RotationMatrix",
      "type" : "std::vector<double>",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "custom_cast" : "std::vector<double>(value.begin(), value.end())",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the rotation matrix defined by the eigenvalues/eigenvectors."
    },
    {
      "name" : "Volume",
      "type" : "double",
      "no_print" : true,
      "active" : true,
      "parameters" : [
        {
          "name" : "label",
          "type" : "int64_t"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the number of pixels for a label. This is the same as the volume and the zero order moment"
    }
  ],
  "tests" : [
    {
      "tag" : "cthead1",
      "description" : "cthead1 with defaults",
      "settings" : [],
      "inputs" : [
        "Input/cthead1.png",
        "Input/2th_cthead1.mha"
      ]
    }
  ],
  "briefdescription" : "Given a label map and an optional intensity image, compute geometric features.",
  "detaileddescription" : "This filter enables the measurement of geometric features of all objects in a labeled ND volume. This labeled volume can represent, for instance, a medical image segmented into different anatomical structures or a microscope image segmented into individual cells. This filter is closely related to the itkLabelStatisticsImageFilter, which measures statistics of image regions defined by a labeled mask such as min, max, and mean intensity, intensity standard deviation, and bounding boxes. This filter, however, measures the geometry of the labeled regions themselves.\n\nIt calculates features similar to the regionprops command of Matlab. The set of measurements that it enables include: volume, centroid, eigenvalues, eigenvectors, axes lenghts, eccentricity, elongation, orientation, bounding box, oriented bounding box, and rotation matrix. These features are based solely on the labeled mask itself. It also calculates integrated intensity and weighted centroid, which are measured on an intensity image under the labeled mask. These features represent the set of currently calculated features, but the framework of the filter is designed so that it can be easily expanded to measure a wide variety of other features.\n\n\\authors Dirk Padfield and James Miller.\n\nThis work is part of the National Alliance for Medical ImageComputing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149. Information on the National Centers for Biomedical Computing can be obtained fromhttp://commonfund.nih.gov/bioinformatics.\n\nThis filter was contributed in the Insight Journal paper: \"A Label Geometry Image Filter for Multiple Object Measurement\" by Padfield D., Miller Jhttp://www.insight-journal.org/browse/publication/301http://hdl.handle.net/1926/1493\n\n\\par Wiki Examples:\n\n\\li All Examples\n\n\\li Get geometric properties of labeled regions in an image"
}
