
  this->PreUpdate( filter.GetPointer() );

  typename FilterType::OutputImageType *itkOutImage = NULL;

  try
    {
    // Run the ITK filter and return the output as a SimpleITK image
    filter->Update();
    itkOutImage = filter->GetOutput();
    }
  catch (itk::ProcessAborted &e)
    {
    // check if output image is valid
    itkOutImage = filter->GetOutput();
    if (itkOutImage->GetLargestPossibleRegion() !=
        itkOutImage->GetBufferedRegion())
      {
      // make ITK image zero sized
      typename FilterType::OutputImageType::RegionType region;
      itkOutImage->SetRegions(region);
      itkOutImage->Allocate();
      }
    }
  catch (itk::ExceptionObject &e)
    {
    throw GenericException(e);
    }

$(when measurements $(foreach measurements
$(if custom_itk_cast then
OUT=[[  ${custom_itk_cast}]]
else
OUT=[[  this->m_${name} = filter->Get${name}();]]
end)
))

  this->FixNonZeroIndex( itkOutImage );
  return Image( this->CastITKToImage(itkOutImage) );
